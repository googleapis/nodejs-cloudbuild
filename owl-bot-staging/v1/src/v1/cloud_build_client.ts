// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';
import * as path from 'path';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
/**
 * Client JSON configuration object, loaded from
 * `src/v1/cloud_build_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './cloud_build_client_config.json';
import { operationsProtos } from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  Creates and manages builds on Google Cloud Platform.
 *
 *  The main concept used by this API is a `Build`, which describes the location
 *  of the source to build, how to build the source, and where to store the
 *  built artifacts, if any.
 *
 *  A user can list previously-requested builds or get builds by their ID to
 *  determine the status of the build.
 * @class
 * @memberof v1
 */
export class CloudBuildClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  cloudBuildStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of CloudBuildClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof CloudBuildClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    // For Node.js, pass the path to JSON proto file.
    // For browsers, pass the JSON content.

    const nodejsProtoPath = path.join(__dirname, '..', '..', 'protos', 'protos.json');
    this._protos = this._gaxGrpc.loadProto(
      opts.fallback ?
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json") :
        nodejsProtoPath
    );

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      buildTriggerPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/triggers/{trigger}'
      ),
      cryptoKeyPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/keyRings/{keyring}/cryptoKeys/{key}'
      ),
      projectPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}'
      ),
      projectBuildPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/builds/{build}'
      ),
      projectLocationBuildPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/builds/{build}'
      ),
      secretVersionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/secrets/{secret}/versions/{version}'
      ),
      serviceAccountPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/serviceAccounts/{service_account}'
      ),
      subscriptionPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/subscriptions/{subscription}'
      ),
      topicPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/topics/{topic}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listBuilds:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'builds'),
      listBuildTriggers:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'triggers')
    };

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.
    const protoFilesRoot = opts.fallback ?
      this._gaxModule.protobuf.Root.fromJSON(
        // eslint-disable-next-line @typescript-eslint/no-var-requires
        require("../../protos/protos.json")) :
      this._gaxModule.protobuf.loadSync(nodejsProtoPath);

    this.operationsClient = this._gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    }).operationsClient(opts);
    const createBuildResponse = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v1.Build') as gax.protobuf.Type;
    const createBuildMetadata = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v1.BuildOperationMetadata') as gax.protobuf.Type;
    const retryBuildResponse = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v1.Build') as gax.protobuf.Type;
    const retryBuildMetadata = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v1.BuildOperationMetadata') as gax.protobuf.Type;
    const runBuildTriggerResponse = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v1.Build') as gax.protobuf.Type;
    const runBuildTriggerMetadata = protoFilesRoot.lookup(
      '.google.devtools.cloudbuild.v1.BuildOperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createBuild: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createBuildResponse.decode.bind(createBuildResponse),
        createBuildMetadata.decode.bind(createBuildMetadata)),
      retryBuild: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        retryBuildResponse.decode.bind(retryBuildResponse),
        retryBuildMetadata.decode.bind(retryBuildMetadata)),
      runBuildTrigger: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        runBuildTriggerResponse.decode.bind(runBuildTriggerResponse),
        runBuildTriggerMetadata.decode.bind(runBuildTriggerMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.devtools.cloudbuild.v1.CloudBuild', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.cloudBuildStub) {
      return this.cloudBuildStub;
    }

    // Put together the "service stub" for
    // google.devtools.cloudbuild.v1.CloudBuild.
    this.cloudBuildStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.devtools.cloudbuild.v1.CloudBuild') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.devtools.cloudbuild.v1.CloudBuild,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const cloudBuildStubMethods =
        ['createBuild', 'getBuild', 'listBuilds', 'cancelBuild', 'retryBuild', 'createBuildTrigger', 'getBuildTrigger', 'listBuildTriggers', 'deleteBuildTrigger', 'updateBuildTrigger', 'runBuildTrigger', 'receiveTriggerWebhook', 'createWorkerPool', 'getWorkerPool', 'deleteWorkerPool', 'updateWorkerPool', 'listWorkerPools'];
    for (const methodName of cloudBuildStubMethods) {
      const callPromise = this.cloudBuildStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.cloudBuildStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'cloudbuild.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'cloudbuild.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getBuild(
      request: protos.google.devtools.cloudbuild.v1.IGetBuildRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuild,
        protos.google.devtools.cloudbuild.v1.IGetBuildRequest|undefined, {}|undefined
      ]>;
  getBuild(
      request: protos.google.devtools.cloudbuild.v1.IGetBuildRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IBuild,
          protos.google.devtools.cloudbuild.v1.IGetBuildRequest|null|undefined,
          {}|null|undefined>): void;
  getBuild(
      request: protos.google.devtools.cloudbuild.v1.IGetBuildRequest,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IBuild,
          protos.google.devtools.cloudbuild.v1.IGetBuildRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns information about a previously requested build.
 *
 * The `Build` that is returned includes its status (such as `SUCCESS`,
 * `FAILURE`, or `WORKING`), and timing information.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the `Build` to retrieve.
 *   Format: `projects/{project}/locations/{location}/builds/{build}`
 * @param {string} request.projectId
 *   Required. ID of the project.
 * @param {string} request.id
 *   Required. ID of the build.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Build]{@link google.devtools.cloudbuild.v1.Build}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getBuild(request);
 */
  getBuild(
      request: protos.google.devtools.cloudbuild.v1.IGetBuildRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.cloudbuild.v1.IBuild,
          protos.google.devtools.cloudbuild.v1.IGetBuildRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.cloudbuild.v1.IBuild,
          protos.google.devtools.cloudbuild.v1.IGetBuildRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuild,
        protos.google.devtools.cloudbuild.v1.IGetBuildRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getBuild(request, options, callback);
  }
  cancelBuild(
      request: protos.google.devtools.cloudbuild.v1.ICancelBuildRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuild,
        protos.google.devtools.cloudbuild.v1.ICancelBuildRequest|undefined, {}|undefined
      ]>;
  cancelBuild(
      request: protos.google.devtools.cloudbuild.v1.ICancelBuildRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IBuild,
          protos.google.devtools.cloudbuild.v1.ICancelBuildRequest|null|undefined,
          {}|null|undefined>): void;
  cancelBuild(
      request: protos.google.devtools.cloudbuild.v1.ICancelBuildRequest,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IBuild,
          protos.google.devtools.cloudbuild.v1.ICancelBuildRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Cancels a build in progress.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the `Build` to cancel.
 *   Format: `projects/{project}/locations/{location}/builds/{build}`
 * @param {string} request.projectId
 *   Required. ID of the project.
 * @param {string} request.id
 *   Required. ID of the build.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Build]{@link google.devtools.cloudbuild.v1.Build}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.cancelBuild(request);
 */
  cancelBuild(
      request: protos.google.devtools.cloudbuild.v1.ICancelBuildRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.cloudbuild.v1.IBuild,
          protos.google.devtools.cloudbuild.v1.ICancelBuildRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.cloudbuild.v1.IBuild,
          protos.google.devtools.cloudbuild.v1.ICancelBuildRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuild,
        protos.google.devtools.cloudbuild.v1.ICancelBuildRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.cancelBuild(request, options, callback);
  }
  createBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.ICreateBuildTriggerRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuildTrigger,
        protos.google.devtools.cloudbuild.v1.ICreateBuildTriggerRequest|undefined, {}|undefined
      ]>;
  createBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.ICreateBuildTriggerRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.ICreateBuildTriggerRequest|null|undefined,
          {}|null|undefined>): void;
  createBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.ICreateBuildTriggerRequest,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.ICreateBuildTriggerRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a new `BuildTrigger`.
 *
 * This API is experimental.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. ID of the project for which to configure automatic builds.
 * @param {google.devtools.cloudbuild.v1.BuildTrigger} request.trigger
 *   Required. `BuildTrigger` to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BuildTrigger]{@link google.devtools.cloudbuild.v1.BuildTrigger}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createBuildTrigger(request);
 */
  createBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.ICreateBuildTriggerRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.ICreateBuildTriggerRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.ICreateBuildTriggerRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuildTrigger,
        protos.google.devtools.cloudbuild.v1.ICreateBuildTriggerRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.createBuildTrigger(request, options, callback);
  }
  getBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IGetBuildTriggerRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuildTrigger,
        protos.google.devtools.cloudbuild.v1.IGetBuildTriggerRequest|undefined, {}|undefined
      ]>;
  getBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IGetBuildTriggerRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.IGetBuildTriggerRequest|null|undefined,
          {}|null|undefined>): void;
  getBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IGetBuildTriggerRequest,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.IGetBuildTriggerRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns information about a `BuildTrigger`.
 *
 * This API is experimental.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. ID of the project that owns the trigger.
 * @param {string} request.triggerId
 *   Required. Identifier (`id` or `name`) of the `BuildTrigger` to get.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BuildTrigger]{@link google.devtools.cloudbuild.v1.BuildTrigger}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getBuildTrigger(request);
 */
  getBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IGetBuildTriggerRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.IGetBuildTriggerRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.IGetBuildTriggerRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuildTrigger,
        protos.google.devtools.cloudbuild.v1.IGetBuildTriggerRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.getBuildTrigger(request, options, callback);
  }
  deleteBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IDeleteBuildTriggerRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v1.IDeleteBuildTriggerRequest|undefined, {}|undefined
      ]>;
  deleteBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IDeleteBuildTriggerRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.cloudbuild.v1.IDeleteBuildTriggerRequest|null|undefined,
          {}|null|undefined>): void;
  deleteBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IDeleteBuildTriggerRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.cloudbuild.v1.IDeleteBuildTriggerRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a `BuildTrigger` by its project ID and trigger ID.
 *
 * This API is experimental.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. ID of the project that owns the trigger.
 * @param {string} request.triggerId
 *   Required. ID of the `BuildTrigger` to delete.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteBuildTrigger(request);
 */
  deleteBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IDeleteBuildTriggerRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.cloudbuild.v1.IDeleteBuildTriggerRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.cloudbuild.v1.IDeleteBuildTriggerRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v1.IDeleteBuildTriggerRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteBuildTrigger(request, options, callback);
  }
  updateBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IUpdateBuildTriggerRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuildTrigger,
        protos.google.devtools.cloudbuild.v1.IUpdateBuildTriggerRequest|undefined, {}|undefined
      ]>;
  updateBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IUpdateBuildTriggerRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.IUpdateBuildTriggerRequest|null|undefined,
          {}|null|undefined>): void;
  updateBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IUpdateBuildTriggerRequest,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.IUpdateBuildTriggerRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates a `BuildTrigger` by its project ID and trigger ID.
 *
 * This API is experimental.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. ID of the project that owns the trigger.
 * @param {string} request.triggerId
 *   Required. ID of the `BuildTrigger` to update.
 * @param {google.devtools.cloudbuild.v1.BuildTrigger} request.trigger
 *   Required. `BuildTrigger` to update.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [BuildTrigger]{@link google.devtools.cloudbuild.v1.BuildTrigger}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateBuildTrigger(request);
 */
  updateBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IUpdateBuildTriggerRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.IUpdateBuildTriggerRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.cloudbuild.v1.IBuildTrigger,
          protos.google.devtools.cloudbuild.v1.IUpdateBuildTriggerRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuildTrigger,
        protos.google.devtools.cloudbuild.v1.IUpdateBuildTriggerRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.updateBuildTrigger(request, options, callback);
  }
  receiveTriggerWebhook(
      request: protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookResponse,
        protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookRequest|undefined, {}|undefined
      ]>;
  receiveTriggerWebhook(
      request: protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookResponse,
          protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookRequest|null|undefined,
          {}|null|undefined>): void;
  receiveTriggerWebhook(
      request: protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookRequest,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookResponse,
          protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * ReceiveTriggerWebhook [Experimental] is called when the API receives a
 * webhook request targeted at a specific trigger.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {google.api.HttpBody} request.body
 *   HTTP request body.
 * @param {string} request.projectId
 *   Project in which the specified trigger lives
 * @param {string} request.trigger
 *   Name of the trigger to run the payload against
 * @param {string} request.secret
 *   Secret token used for authorization if an OAuth token isn't provided.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ReceiveTriggerWebhookResponse]{@link google.devtools.cloudbuild.v1.ReceiveTriggerWebhookResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.receiveTriggerWebhook(request);
 */
  receiveTriggerWebhook(
      request: protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookResponse,
          protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookResponse,
          protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookResponse,
        protos.google.devtools.cloudbuild.v1.IReceiveTriggerWebhookRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.receiveTriggerWebhook(request, options, callback);
  }
  createWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.ICreateWorkerPoolRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IWorkerPool,
        protos.google.devtools.cloudbuild.v1.ICreateWorkerPoolRequest|undefined, {}|undefined
      ]>;
  createWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.ICreateWorkerPoolRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.ICreateWorkerPoolRequest|null|undefined,
          {}|null|undefined>): void;
  createWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.ICreateWorkerPoolRequest,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.ICreateWorkerPoolRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a `WorkerPool` to run the builds, and returns the new worker pool.
 *
 * This API is experimental.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   ID of the parent project.
 * @param {google.devtools.cloudbuild.v1.WorkerPool} request.workerPool
 *   `WorkerPool` resource to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [WorkerPool]{@link google.devtools.cloudbuild.v1.WorkerPool}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.createWorkerPool(request);
 */
  createWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.ICreateWorkerPoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.ICreateWorkerPoolRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.ICreateWorkerPoolRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IWorkerPool,
        protos.google.devtools.cloudbuild.v1.ICreateWorkerPoolRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.createWorkerPool(request, options, callback);
  }
  getWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IGetWorkerPoolRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IWorkerPool,
        protos.google.devtools.cloudbuild.v1.IGetWorkerPoolRequest|undefined, {}|undefined
      ]>;
  getWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IGetWorkerPoolRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.IGetWorkerPoolRequest|null|undefined,
          {}|null|undefined>): void;
  getWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IGetWorkerPoolRequest,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.IGetWorkerPoolRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Returns information about a `WorkerPool`.
 *
 * This API is experimental.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The field will contain name of the resource requested, for example:
 *   "projects/project-1/workerPools/workerpool-name"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [WorkerPool]{@link google.devtools.cloudbuild.v1.WorkerPool}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getWorkerPool(request);
 */
  getWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IGetWorkerPoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.IGetWorkerPoolRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.IGetWorkerPoolRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IWorkerPool,
        protos.google.devtools.cloudbuild.v1.IGetWorkerPoolRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.getWorkerPool(request, options, callback);
  }
  deleteWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IDeleteWorkerPoolRequest,
      options?: CallOptions):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v1.IDeleteWorkerPoolRequest|undefined, {}|undefined
      ]>;
  deleteWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IDeleteWorkerPoolRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.cloudbuild.v1.IDeleteWorkerPoolRequest|null|undefined,
          {}|null|undefined>): void;
  deleteWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IDeleteWorkerPoolRequest,
      callback: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.cloudbuild.v1.IDeleteWorkerPoolRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Deletes a `WorkerPool` by its project ID and WorkerPool name.
 *
 * This API is experimental.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The field will contain name of the resource requested, for example:
 *   "projects/project-1/workerPools/workerpool-name"
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.deleteWorkerPool(request);
 */
  deleteWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IDeleteWorkerPoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.cloudbuild.v1.IDeleteWorkerPoolRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.protobuf.IEmpty,
          protos.google.devtools.cloudbuild.v1.IDeleteWorkerPoolRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.devtools.cloudbuild.v1.IDeleteWorkerPoolRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.deleteWorkerPool(request, options, callback);
  }
  updateWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IUpdateWorkerPoolRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IWorkerPool,
        protos.google.devtools.cloudbuild.v1.IUpdateWorkerPoolRequest|undefined, {}|undefined
      ]>;
  updateWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IUpdateWorkerPoolRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.IUpdateWorkerPoolRequest|null|undefined,
          {}|null|undefined>): void;
  updateWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IUpdateWorkerPoolRequest,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.IUpdateWorkerPoolRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Update a `WorkerPool`.
 *
 * This API is experimental.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The field will contain name of the resource requested, for example:
 *   "projects/project-1/workerPools/workerpool-name"
 * @param {google.devtools.cloudbuild.v1.WorkerPool} request.workerPool
 *   `WorkerPool` resource to update.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [WorkerPool]{@link google.devtools.cloudbuild.v1.WorkerPool}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.updateWorkerPool(request);
 */
  updateWorkerPool(
      request: protos.google.devtools.cloudbuild.v1.IUpdateWorkerPoolRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.IUpdateWorkerPoolRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.cloudbuild.v1.IWorkerPool,
          protos.google.devtools.cloudbuild.v1.IUpdateWorkerPoolRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IWorkerPool,
        protos.google.devtools.cloudbuild.v1.IUpdateWorkerPoolRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.updateWorkerPool(request, options, callback);
  }
  listWorkerPools(
      request: protos.google.devtools.cloudbuild.v1.IListWorkerPoolsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IListWorkerPoolsResponse,
        protos.google.devtools.cloudbuild.v1.IListWorkerPoolsRequest|undefined, {}|undefined
      ]>;
  listWorkerPools(
      request: protos.google.devtools.cloudbuild.v1.IListWorkerPoolsRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IListWorkerPoolsResponse,
          protos.google.devtools.cloudbuild.v1.IListWorkerPoolsRequest|null|undefined,
          {}|null|undefined>): void;
  listWorkerPools(
      request: protos.google.devtools.cloudbuild.v1.IListWorkerPoolsRequest,
      callback: Callback<
          protos.google.devtools.cloudbuild.v1.IListWorkerPoolsResponse,
          protos.google.devtools.cloudbuild.v1.IListWorkerPoolsRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * List project's `WorkerPools`.
 *
 * This API is experimental.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   ID of the parent project.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ListWorkerPoolsResponse]{@link google.devtools.cloudbuild.v1.ListWorkerPoolsResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.listWorkerPools(request);
 */
  listWorkerPools(
      request: protos.google.devtools.cloudbuild.v1.IListWorkerPoolsRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.devtools.cloudbuild.v1.IListWorkerPoolsResponse,
          protos.google.devtools.cloudbuild.v1.IListWorkerPoolsRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.devtools.cloudbuild.v1.IListWorkerPoolsResponse,
          protos.google.devtools.cloudbuild.v1.IListWorkerPoolsRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IListWorkerPoolsResponse,
        protos.google.devtools.cloudbuild.v1.IListWorkerPoolsRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    this.initialize();
    return this.innerApiCalls.listWorkerPools(request, options, callback);
  }

  createBuild(
      request: protos.google.devtools.cloudbuild.v1.ICreateBuildRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createBuild(
      request: protos.google.devtools.cloudbuild.v1.ICreateBuildRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createBuild(
      request: protos.google.devtools.cloudbuild.v1.ICreateBuildRequest,
      callback: Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Starts a build with the specified configuration.
 *
 * This method returns a long-running `Operation`, which includes the build
 * ID. Pass the build ID to `GetBuild` to determine the build status (such as
 * `SUCCESS` or `FAILURE`).
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent resource where this build will be created.
 *   Format: `projects/{project}/locations/{location}`
 * @param {string} request.projectId
 *   Required. ID of the project.
 * @param {google.devtools.cloudbuild.v1.Build} request.build
 *   Required. Build resource to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.createBuild(request);
 * const [response] = await operation.promise();
 */
  createBuild(
      request: protos.google.devtools.cloudbuild.v1.ICreateBuildRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createBuild(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createBuild()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkCreateBuildProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkCreateBuildProgress(name: string): Promise<LROperation<protos.google.devtools.cloudbuild.v1.Build, protos.google.devtools.cloudbuild.v1.BuildOperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createBuild, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.devtools.cloudbuild.v1.Build, protos.google.devtools.cloudbuild.v1.BuildOperationMetadata>;
  }
  retryBuild(
      request: protos.google.devtools.cloudbuild.v1.IRetryBuildRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  retryBuild(
      request: protos.google.devtools.cloudbuild.v1.IRetryBuildRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  retryBuild(
      request: protos.google.devtools.cloudbuild.v1.IRetryBuildRequest,
      callback: Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Creates a new build based on the specified build.
 *
 * This method creates a new build using the original build request, which may
 * or may not result in an identical build.
 *
 * For triggered builds:
 *
 * * Triggered builds resolve to a precise revision; therefore a retry of a
 * triggered build will result in a build that uses the same revision.
 *
 * For non-triggered builds that specify `RepoSource`:
 *
 * * If the original build built from the tip of a branch, the retried build
 * will build from the tip of that branch, which may not be the same revision
 * as the original build.
 * * If the original build specified a commit sha or revision ID, the retried
 * build will use the identical source.
 *
 * For builds that specify `StorageSource`:
 *
 * * If the original build pulled source from Google Cloud Storage without
 * specifying the generation of the object, the new build will use the current
 * object, which may be different from the original build source.
 * * If the original build pulled source from Cloud Storage and specified the
 * generation of the object, the new build will attempt to use the same
 * object, which may or may not be available depending on the bucket's
 * lifecycle management settings.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   The name of the `Build` to retry.
 *   Format: `projects/{project}/locations/{location}/builds/{build}`
 * @param {string} request.projectId
 *   Required. ID of the project.
 * @param {string} request.id
 *   Required. Build ID of the original build.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.retryBuild(request);
 * const [response] = await operation.promise();
 */
  retryBuild(
      request: protos.google.devtools.cloudbuild.v1.IRetryBuildRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.retryBuild(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `retryBuild()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkRetryBuildProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkRetryBuildProgress(name: string): Promise<LROperation<protos.google.devtools.cloudbuild.v1.Build, protos.google.devtools.cloudbuild.v1.BuildOperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.retryBuild, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.devtools.cloudbuild.v1.Build, protos.google.devtools.cloudbuild.v1.BuildOperationMetadata>;
  }
  runBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IRunBuildTriggerRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  runBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IRunBuildTriggerRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  runBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IRunBuildTriggerRequest,
      callback: Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Runs a `BuildTrigger` at a particular source revision.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. ID of the project.
 * @param {string} request.triggerId
 *   Required. ID of the trigger.
 * @param {google.devtools.cloudbuild.v1.RepoSource} request.source
 *   Source to build against this trigger.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.runBuildTrigger(request);
 * const [response] = await operation.promise();
 */
  runBuildTrigger(
      request: protos.google.devtools.cloudbuild.v1.IRunBuildTriggerRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.devtools.cloudbuild.v1.IBuild, protos.google.devtools.cloudbuild.v1.IBuildOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.runBuildTrigger(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `runBuildTrigger()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkRunBuildTriggerProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkRunBuildTriggerProgress(name: string): Promise<LROperation<protos.google.devtools.cloudbuild.v1.Build, protos.google.devtools.cloudbuild.v1.BuildOperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.runBuildTrigger, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.devtools.cloudbuild.v1.Build, protos.google.devtools.cloudbuild.v1.BuildOperationMetadata>;
  }
  listBuilds(
      request: protos.google.devtools.cloudbuild.v1.IListBuildsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuild[],
        protos.google.devtools.cloudbuild.v1.IListBuildsRequest|null,
        protos.google.devtools.cloudbuild.v1.IListBuildsResponse
      ]>;
  listBuilds(
      request: protos.google.devtools.cloudbuild.v1.IListBuildsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.devtools.cloudbuild.v1.IListBuildsRequest,
          protos.google.devtools.cloudbuild.v1.IListBuildsResponse|null|undefined,
          protos.google.devtools.cloudbuild.v1.IBuild>): void;
  listBuilds(
      request: protos.google.devtools.cloudbuild.v1.IListBuildsRequest,
      callback: PaginationCallback<
          protos.google.devtools.cloudbuild.v1.IListBuildsRequest,
          protos.google.devtools.cloudbuild.v1.IListBuildsResponse|null|undefined,
          protos.google.devtools.cloudbuild.v1.IBuild>): void;
/**
 * Lists previously requested builds.
 *
 * Previously requested builds may still be in-progress, or may have finished
 * successfully or unsuccessfully.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent of the collection of `Builds`.
 *   Format: `projects/{project}/locations/location`
 * @param {string} request.projectId
 *   Required. ID of the project.
 * @param {number} request.pageSize
 *   Number of results to return in the list.
 * @param {string} request.pageToken
 *   The page token for the next page of Builds.
 *
 *   If unspecified, the first page of results is returned.
 *
 *   If the token is rejected for any reason, INVALID_ARGUMENT will be thrown.
 *   In this case, the token should be discarded, and pagination should be
 *   restarted from the first page of results.
 *
 *   See https://google.aip.dev/158 for more.
 * @param {string} request.filter
 *   The raw filter text to constrain the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Build]{@link google.devtools.cloudbuild.v1.Build}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBuildsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listBuilds(
      request: protos.google.devtools.cloudbuild.v1.IListBuildsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.devtools.cloudbuild.v1.IListBuildsRequest,
          protos.google.devtools.cloudbuild.v1.IListBuildsResponse|null|undefined,
          protos.google.devtools.cloudbuild.v1.IBuild>,
      callback?: PaginationCallback<
          protos.google.devtools.cloudbuild.v1.IListBuildsRequest,
          protos.google.devtools.cloudbuild.v1.IListBuildsResponse|null|undefined,
          protos.google.devtools.cloudbuild.v1.IBuild>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuild[],
        protos.google.devtools.cloudbuild.v1.IListBuildsRequest|null,
        protos.google.devtools.cloudbuild.v1.IListBuildsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listBuilds(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent of the collection of `Builds`.
 *   Format: `projects/{project}/locations/location`
 * @param {string} request.projectId
 *   Required. ID of the project.
 * @param {number} request.pageSize
 *   Number of results to return in the list.
 * @param {string} request.pageToken
 *   The page token for the next page of Builds.
 *
 *   If unspecified, the first page of results is returned.
 *
 *   If the token is rejected for any reason, INVALID_ARGUMENT will be thrown.
 *   In this case, the token should be discarded, and pagination should be
 *   restarted from the first page of results.
 *
 *   See https://google.aip.dev/158 for more.
 * @param {string} request.filter
 *   The raw filter text to constrain the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Build]{@link google.devtools.cloudbuild.v1.Build} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBuildsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listBuildsStream(
      request?: protos.google.devtools.cloudbuild.v1.IListBuildsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listBuilds.createStream(
      this.innerApiCalls.listBuilds as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBuilds`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   The parent of the collection of `Builds`.
 *   Format: `projects/{project}/locations/location`
 * @param {string} request.projectId
 *   Required. ID of the project.
 * @param {number} request.pageSize
 *   Number of results to return in the list.
 * @param {string} request.pageToken
 *   The page token for the next page of Builds.
 *
 *   If unspecified, the first page of results is returned.
 *
 *   If the token is rejected for any reason, INVALID_ARGUMENT will be thrown.
 *   In this case, the token should be discarded, and pagination should be
 *   restarted from the first page of results.
 *
 *   See https://google.aip.dev/158 for more.
 * @param {string} request.filter
 *   The raw filter text to constrain the results.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Build]{@link google.devtools.cloudbuild.v1.Build}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listBuildsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listBuildsAsync(
      request?: protos.google.devtools.cloudbuild.v1.IListBuildsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.devtools.cloudbuild.v1.IBuild>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listBuilds.asyncIterate(
      this.innerApiCalls['listBuilds'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.devtools.cloudbuild.v1.IBuild>;
  }
  listBuildTriggers(
      request: protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest,
      options?: CallOptions):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuildTrigger[],
        protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest|null,
        protos.google.devtools.cloudbuild.v1.IListBuildTriggersResponse
      ]>;
  listBuildTriggers(
      request: protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest,
          protos.google.devtools.cloudbuild.v1.IListBuildTriggersResponse|null|undefined,
          protos.google.devtools.cloudbuild.v1.IBuildTrigger>): void;
  listBuildTriggers(
      request: protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest,
      callback: PaginationCallback<
          protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest,
          protos.google.devtools.cloudbuild.v1.IListBuildTriggersResponse|null|undefined,
          protos.google.devtools.cloudbuild.v1.IBuildTrigger>): void;
/**
 * Lists existing `BuildTrigger`s.
 *
 * This API is experimental.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. ID of the project for which to list BuildTriggers.
 * @param {number} request.pageSize
 *   Number of results to return in the list.
 * @param {string} request.pageToken
 *   Token to provide to skip to a particular spot in the list.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [BuildTrigger]{@link google.devtools.cloudbuild.v1.BuildTrigger}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listBuildTriggersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listBuildTriggers(
      request: protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest,
          protos.google.devtools.cloudbuild.v1.IListBuildTriggersResponse|null|undefined,
          protos.google.devtools.cloudbuild.v1.IBuildTrigger>,
      callback?: PaginationCallback<
          protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest,
          protos.google.devtools.cloudbuild.v1.IListBuildTriggersResponse|null|undefined,
          protos.google.devtools.cloudbuild.v1.IBuildTrigger>):
      Promise<[
        protos.google.devtools.cloudbuild.v1.IBuildTrigger[],
        protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest|null,
        protos.google.devtools.cloudbuild.v1.IListBuildTriggersResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    this.initialize();
    return this.innerApiCalls.listBuildTriggers(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. ID of the project for which to list BuildTriggers.
 * @param {number} request.pageSize
 *   Number of results to return in the list.
 * @param {string} request.pageToken
 *   Token to provide to skip to a particular spot in the list.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [BuildTrigger]{@link google.devtools.cloudbuild.v1.BuildTrigger} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listBuildTriggersAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listBuildTriggersStream(
      request?: protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listBuildTriggers.createStream(
      this.innerApiCalls.listBuildTriggers as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listBuildTriggers`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.projectId
 *   Required. ID of the project for which to list BuildTriggers.
 * @param {number} request.pageSize
 *   Number of results to return in the list.
 * @param {string} request.pageToken
 *   Token to provide to skip to a particular spot in the list.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [BuildTrigger]{@link google.devtools.cloudbuild.v1.BuildTrigger}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listBuildTriggersAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listBuildTriggersAsync(
      request?: protos.google.devtools.cloudbuild.v1.IListBuildTriggersRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.devtools.cloudbuild.v1.IBuildTrigger>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'project_id': request.projectId || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listBuildTriggers.asyncIterate(
      this.innerApiCalls['listBuildTriggers'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.devtools.cloudbuild.v1.IBuildTrigger>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified buildTrigger resource name string.
   *
   * @param {string} project
   * @param {string} trigger
   * @returns {string} Resource name string.
   */
  buildTriggerPath(project:string,trigger:string) {
    return this.pathTemplates.buildTriggerPathTemplate.render({
      project: project,
      trigger: trigger,
    });
  }

  /**
   * Parse the project from BuildTrigger resource.
   *
   * @param {string} buildTriggerName
   *   A fully-qualified path representing BuildTrigger resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromBuildTriggerName(buildTriggerName: string) {
    return this.pathTemplates.buildTriggerPathTemplate.match(buildTriggerName).project;
  }

  /**
   * Parse the trigger from BuildTrigger resource.
   *
   * @param {string} buildTriggerName
   *   A fully-qualified path representing BuildTrigger resource.
   * @returns {string} A string representing the trigger.
   */
  matchTriggerFromBuildTriggerName(buildTriggerName: string) {
    return this.pathTemplates.buildTriggerPathTemplate.match(buildTriggerName).trigger;
  }

  /**
   * Return a fully-qualified cryptoKey resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} keyring
   * @param {string} key
   * @returns {string} Resource name string.
   */
  cryptoKeyPath(project:string,location:string,keyring:string,key:string) {
    return this.pathTemplates.cryptoKeyPathTemplate.render({
      project: project,
      location: location,
      keyring: keyring,
      key: key,
    });
  }

  /**
   * Parse the project from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).project;
  }

  /**
   * Parse the location from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).location;
  }

  /**
   * Parse the keyring from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the keyring.
   */
  matchKeyringFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).keyring;
  }

  /**
   * Parse the key from CryptoKey resource.
   *
   * @param {string} cryptoKeyName
   *   A fully-qualified path representing CryptoKey resource.
   * @returns {string} A string representing the key.
   */
  matchKeyFromCryptoKeyName(cryptoKeyName: string) {
    return this.pathTemplates.cryptoKeyPathTemplate.match(cryptoKeyName).key;
  }

  /**
   * Return a fully-qualified project resource name string.
   *
   * @param {string} project
   * @returns {string} Resource name string.
   */
  projectPath(project:string) {
    return this.pathTemplates.projectPathTemplate.render({
      project: project,
    });
  }

  /**
   * Parse the project from Project resource.
   *
   * @param {string} projectName
   *   A fully-qualified path representing Project resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectName(projectName: string) {
    return this.pathTemplates.projectPathTemplate.match(projectName).project;
  }

  /**
   * Return a fully-qualified projectBuild resource name string.
   *
   * @param {string} project
   * @param {string} build
   * @returns {string} Resource name string.
   */
  projectBuildPath(project:string,build:string) {
    return this.pathTemplates.projectBuildPathTemplate.render({
      project: project,
      build: build,
    });
  }

  /**
   * Parse the project from ProjectBuild resource.
   *
   * @param {string} projectBuildName
   *   A fully-qualified path representing project_build resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectBuildName(projectBuildName: string) {
    return this.pathTemplates.projectBuildPathTemplate.match(projectBuildName).project;
  }

  /**
   * Parse the build from ProjectBuild resource.
   *
   * @param {string} projectBuildName
   *   A fully-qualified path representing project_build resource.
   * @returns {string} A string representing the build.
   */
  matchBuildFromProjectBuildName(projectBuildName: string) {
    return this.pathTemplates.projectBuildPathTemplate.match(projectBuildName).build;
  }

  /**
   * Return a fully-qualified projectLocationBuild resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} build
   * @returns {string} Resource name string.
   */
  projectLocationBuildPath(project:string,location:string,build:string) {
    return this.pathTemplates.projectLocationBuildPathTemplate.render({
      project: project,
      location: location,
      build: build,
    });
  }

  /**
   * Parse the project from ProjectLocationBuild resource.
   *
   * @param {string} projectLocationBuildName
   *   A fully-qualified path representing project_location_build resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromProjectLocationBuildName(projectLocationBuildName: string) {
    return this.pathTemplates.projectLocationBuildPathTemplate.match(projectLocationBuildName).project;
  }

  /**
   * Parse the location from ProjectLocationBuild resource.
   *
   * @param {string} projectLocationBuildName
   *   A fully-qualified path representing project_location_build resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromProjectLocationBuildName(projectLocationBuildName: string) {
    return this.pathTemplates.projectLocationBuildPathTemplate.match(projectLocationBuildName).location;
  }

  /**
   * Parse the build from ProjectLocationBuild resource.
   *
   * @param {string} projectLocationBuildName
   *   A fully-qualified path representing project_location_build resource.
   * @returns {string} A string representing the build.
   */
  matchBuildFromProjectLocationBuildName(projectLocationBuildName: string) {
    return this.pathTemplates.projectLocationBuildPathTemplate.match(projectLocationBuildName).build;
  }

  /**
   * Return a fully-qualified secretVersion resource name string.
   *
   * @param {string} project
   * @param {string} secret
   * @param {string} version
   * @returns {string} Resource name string.
   */
  secretVersionPath(project:string,secret:string,version:string) {
    return this.pathTemplates.secretVersionPathTemplate.render({
      project: project,
      secret: secret,
      version: version,
    });
  }

  /**
   * Parse the project from SecretVersion resource.
   *
   * @param {string} secretVersionName
   *   A fully-qualified path representing SecretVersion resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSecretVersionName(secretVersionName: string) {
    return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName).project;
  }

  /**
   * Parse the secret from SecretVersion resource.
   *
   * @param {string} secretVersionName
   *   A fully-qualified path representing SecretVersion resource.
   * @returns {string} A string representing the secret.
   */
  matchSecretFromSecretVersionName(secretVersionName: string) {
    return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName).secret;
  }

  /**
   * Parse the version from SecretVersion resource.
   *
   * @param {string} secretVersionName
   *   A fully-qualified path representing SecretVersion resource.
   * @returns {string} A string representing the version.
   */
  matchVersionFromSecretVersionName(secretVersionName: string) {
    return this.pathTemplates.secretVersionPathTemplate.match(secretVersionName).version;
  }

  /**
   * Return a fully-qualified serviceAccount resource name string.
   *
   * @param {string} project
   * @param {string} service_account
   * @returns {string} Resource name string.
   */
  serviceAccountPath(project:string,serviceAccount:string) {
    return this.pathTemplates.serviceAccountPathTemplate.render({
      project: project,
      service_account: serviceAccount,
    });
  }

  /**
   * Parse the project from ServiceAccount resource.
   *
   * @param {string} serviceAccountName
   *   A fully-qualified path representing ServiceAccount resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromServiceAccountName(serviceAccountName: string) {
    return this.pathTemplates.serviceAccountPathTemplate.match(serviceAccountName).project;
  }

  /**
   * Parse the service_account from ServiceAccount resource.
   *
   * @param {string} serviceAccountName
   *   A fully-qualified path representing ServiceAccount resource.
   * @returns {string} A string representing the service_account.
   */
  matchServiceAccountFromServiceAccountName(serviceAccountName: string) {
    return this.pathTemplates.serviceAccountPathTemplate.match(serviceAccountName).service_account;
  }

  /**
   * Return a fully-qualified subscription resource name string.
   *
   * @param {string} project
   * @param {string} subscription
   * @returns {string} Resource name string.
   */
  subscriptionPath(project:string,subscription:string) {
    return this.pathTemplates.subscriptionPathTemplate.render({
      project: project,
      subscription: subscription,
    });
  }

  /**
   * Parse the project from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromSubscriptionName(subscriptionName: string) {
    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName).project;
  }

  /**
   * Parse the subscription from Subscription resource.
   *
   * @param {string} subscriptionName
   *   A fully-qualified path representing Subscription resource.
   * @returns {string} A string representing the subscription.
   */
  matchSubscriptionFromSubscriptionName(subscriptionName: string) {
    return this.pathTemplates.subscriptionPathTemplate.match(subscriptionName).subscription;
  }

  /**
   * Return a fully-qualified topic resource name string.
   *
   * @param {string} project
   * @param {string} topic
   * @returns {string} Resource name string.
   */
  topicPath(project:string,topic:string) {
    return this.pathTemplates.topicPathTemplate.render({
      project: project,
      topic: topic,
    });
  }

  /**
   * Parse the project from Topic resource.
   *
   * @param {string} topicName
   *   A fully-qualified path representing Topic resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromTopicName(topicName: string) {
    return this.pathTemplates.topicPathTemplate.match(topicName).project;
  }

  /**
   * Parse the topic from Topic resource.
   *
   * @param {string} topicName
   *   A fully-qualified path representing Topic resource.
   * @returns {string} A string representing the topic.
   */
  matchTopicFromTopicName(topicName: string) {
    return this.pathTemplates.topicPathTemplate.match(topicName).topic;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.cloudBuildStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
